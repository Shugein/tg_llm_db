from typing import List, Dict, Optional
from loguru import logger
from sqlalchemy import select, insert

from .openrouter import openrouter_generate_async, OpenRouterError
from .context import ConversationManager
from .external_apis import external_api_service, ExternalAPIError, ServiceType
from ..config import settings
from ..database.database import User, Dialog, get_session

class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM —á–µ—Ä–µ–∑ OpenRouter"""
    
    def __init__(self, conversation_manager: ConversationManager):
        self.conversation_manager = conversation_manager
    
    async def _ensure_user_exists(self, user_id: int, telegram_user) -> int:
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID"""
        try:
            async for session in get_session():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if user is None:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_user = User(
                        telegram_id=user_id,
                        username=getattr(telegram_user, 'username', None),
                        first_name=getattr(telegram_user, 'first_name', None),
                        last_name=getattr(telegram_user, 'last_name', None)
                    )
                    session.add(new_user)
                    await session.flush()
                    logger.info(f"Created new user: {user_id}")
                    return new_user.id
                else:
                    return user.id
                    
        except Exception as e:
            logger.error(f"Error ensuring user exists: {e}")
            return None
    
    async def _save_dialog(self, internal_user_id: int, telegram_id: int, 
                          user_message: str, bot_response: str, 
                          model_used: str, tokens_used: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async for session in get_session():
                dialog = Dialog(
                    user_id=internal_user_id,
                    telegram_id=telegram_id,
                    user_message=user_message,
                    bot_response=bot_response,
                    model_used=model_used,
                    tokens_used=tokens_used
                )
                session.add(dialog)
                logger.debug(f"Saved dialog for user {telegram_id}")
                
        except Exception as e:
            logger.error(f"Error saving dialog: {e}")
    
    async def _generate_rag_response(
        self,
        user_id: int,
        user_message: str,
        messages: List[Dict[str, str]],
        use_context: bool = True
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è RAG —Å–∏—Å—Ç–µ–º—É"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
            context = {}
            if use_context and messages:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                recent_messages = messages[-3:] if len(messages) > 3 else messages
                context["conversation_history"] = recent_messages
            
            # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ RAG —Å–∏—Å—Ç–µ–º–µ
            rag_response = await external_api_service.call_rag_service(
                query=user_message,
                context=context,
                user_id=user_id
            )
            
            if rag_response["success"]:
                response_text = rag_response["response"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
                if rag_response.get("sources"):
                    sources = rag_response["sources"]
                    response_text += f"\n\nüìö <i>–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö</i>"
                
                return response_text
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, RAG —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except ExternalAPIError as e:
            logger.error(f"RAG system error for user {user_id}: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        except Exception as e:
            logger.error(f"Unexpected error in RAG response generation: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ RAG —Å–∏—Å—Ç–µ–º–µ."
    
    async def _generate_hybrid_response(
        self,
        user_id: int,
        user_message: str,
        messages: List[Dict[str, str]],
        use_context: bool = True,
        model: Optional[str] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (RAG + LLM)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
            rag_context = {}
            if use_context and messages:
                recent_messages = messages[-3:] if len(messages) > 3 else messages
                rag_context["conversation_history"] = recent_messages
            
            rag_info = None
            try:
                rag_response = await external_api_service.call_rag_service(
                    query=user_message,
                    context=rag_context,
                    user_id=user_id
                )
                
                if rag_response["success"]:
                    rag_info = {
                        "content": rag_response["response"],
                        "sources": rag_response.get("sources", []),
                        "confidence": rag_response.get("confidence", 0.0)
                    }
                    
            except ExternalAPIError:
                logger.warning("RAG system not available for hybrid mode, using LLM only")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM —Å —É—á–µ—Ç–æ–º RAG –¥–∞–Ω–Ω—ã—Ö
            enhanced_messages = messages.copy()
            
            if rag_info and rag_info["confidence"] > 0.3:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > 30%
                rag_context_prompt = f"""
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞:

{rag_info["content"]}

–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(rag_info["sources"])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–û–±—ä–µ–¥–∏–Ω–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
                enhanced_messages.append({"role": "system", "content": rag_context_prompt})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if use_context:
                context_messages = await self.conversation_manager.get_context_for_llm(user_id)
                enhanced_messages.extend(context_messages)
            else:
                enhanced_messages.append({"role": "user", "content": user_message})
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter
            response = await openrouter_generate_async(
                prompt="",
                messages=enhanced_messages,
                model=model or settings.default_model,
                max_tokens=settings.max_tokens,
                temperature=settings.temperature
            )
            
            bot_response = response["content"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è RAG
            if rag_info and rag_info["sources"]:
                bot_response += f"\n\nüß† <i>–û—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ AI –º–æ–¥–µ–ª–∏</i>"
            
            return bot_response
            
        except OpenRouterError as e:
            logger.error(f"OpenRouter error in hybrid mode for user {user_id}: {e}")
            # Fallback –Ω–∞ —á–∏—Å—Ç—ã–π RAG –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return await self._generate_rag_response(user_id, user_message, messages, use_context)
        
        except Exception as e:
            logger.error(f"Unexpected error in hybrid response generation: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ."
    
    async def generate_response(
        self,
        user_id: int,
        user_message: str,
        telegram_user=None,
        model: Optional[str] = None,
        use_context: bool = True,
        system_prompt: Optional[str] = None,
        chat_mode: str = "openrouter"
    ) -> Dict[str, any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param telegram_user: –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        :param model: –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        :param use_context: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        :param system_prompt: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        :param chat_mode: —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è (openrouter/rag/hybrid)
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
            internal_user_id = None
            if telegram_user:
                internal_user_id = await self._ensure_user_exists(user_id, telegram_user)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.conversation_manager.add_message(
                user_id=user_id,
                role="user",
                content=user_message
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            messages = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if chat_mode == "rag":
                bot_response = await self._generate_rag_response(
                    user_id=user_id,
                    user_message=user_message,
                    messages=messages,
                    use_context=use_context
                )
                model_used = "rag_system"
                
            elif chat_mode == "hybrid":
                bot_response = await self._generate_hybrid_response(
                    user_id=user_id,
                    user_message=user_message,
                    messages=messages,
                    use_context=use_context,
                    model=model
                )
                model_used = f"hybrid_{model or settings.default_model}"
                
            else:  # openrouter mode
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if use_context:
                    context_messages = await self.conversation_manager.get_context_for_llm(user_id)
                    messages.extend(context_messages)
                else:
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    messages.append({"role": "user", "content": user_message})
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = await openrouter_generate_async(
                    prompt="",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º messages
                    messages=messages,
                    model=model or settings.default_model,
                    max_tokens=settings.max_tokens,
                    temperature=settings.temperature
                )
                
                bot_response = response["content"]
                model_used = response.get("model", "unknown")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.conversation_manager.add_message(
                user_id=user_id,
                role="assistant",
                content=bot_response
            )
            
            logger.info(f"Generated response for user {user_id} using model {response.get('model', 'unknown')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            tokens_used = response.get("usage", {}).get("total_tokens", 0)
            await self._save_dialog(
                internal_user_id=internal_user_id,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                telegram_id=user_id,
                user_message=user_message,
                bot_response=bot_response,
                model_used=model_used,
                tokens_used=response.get("usage", {}).get("total_tokens", 0) if chat_mode == "openrouter" else 0
            )
            
            return {
                "response": bot_response,
                "model": model_used,
                "usage": response.get("usage", {}) if chat_mode == "openrouter" else {},
                "success": True,
                "chat_mode": chat_mode
            }
            
        except OpenRouterError as e:
            logger.error(f"OpenRouter error for user {user_id}: {e}")
            return {
                "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "error": str(e),
                "success": False
            }
        
        except Exception as e:
            logger.error(f"Unexpected error in generate_response for user {user_id}: {e}")
            return {
                "response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "error": str(e),
                "success": False
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
llm_service: Optional[LLMService] = None